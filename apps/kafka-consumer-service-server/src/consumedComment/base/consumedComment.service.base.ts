/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConsumedComment as PrismaConsumedComment,
  ConsumedPost as PrismaConsumedPost,
} from "@prisma/client";

export class ConsumedCommentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConsumedCommentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.consumedComment.count(args);
  }

  async consumedComments(
    args: Prisma.ConsumedCommentFindManyArgs
  ): Promise<PrismaConsumedComment[]> {
    return this.prisma.consumedComment.findMany(args);
  }
  async consumedComment(
    args: Prisma.ConsumedCommentFindUniqueArgs
  ): Promise<PrismaConsumedComment | null> {
    return this.prisma.consumedComment.findUnique(args);
  }
  async createConsumedComment(
    args: Prisma.ConsumedCommentCreateArgs
  ): Promise<PrismaConsumedComment> {
    return this.prisma.consumedComment.create(args);
  }
  async updateConsumedComment(
    args: Prisma.ConsumedCommentUpdateArgs
  ): Promise<PrismaConsumedComment> {
    return this.prisma.consumedComment.update(args);
  }
  async deleteConsumedComment(
    args: Prisma.ConsumedCommentDeleteArgs
  ): Promise<PrismaConsumedComment> {
    return this.prisma.consumedComment.delete(args);
  }

  async getConsumedPost(parentId: string): Promise<PrismaConsumedPost | null> {
    return this.prisma.consumedComment
      .findUnique({
        where: { id: parentId },
      })
      .consumedPost();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ConsumedComment } from "./ConsumedComment";
import { ConsumedCommentCountArgs } from "./ConsumedCommentCountArgs";
import { ConsumedCommentFindManyArgs } from "./ConsumedCommentFindManyArgs";
import { ConsumedCommentFindUniqueArgs } from "./ConsumedCommentFindUniqueArgs";
import { CreateConsumedCommentArgs } from "./CreateConsumedCommentArgs";
import { UpdateConsumedCommentArgs } from "./UpdateConsumedCommentArgs";
import { DeleteConsumedCommentArgs } from "./DeleteConsumedCommentArgs";
import { ConsumedPost } from "../../consumedPost/base/ConsumedPost";
import { ConsumedCommentService } from "../consumedComment.service";
@graphql.Resolver(() => ConsumedComment)
export class ConsumedCommentResolverBase {
  constructor(protected readonly service: ConsumedCommentService) {}

  async _consumedCommentsMeta(
    @graphql.Args() args: ConsumedCommentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ConsumedComment])
  async consumedComments(
    @graphql.Args() args: ConsumedCommentFindManyArgs
  ): Promise<ConsumedComment[]> {
    return this.service.consumedComments(args);
  }

  @graphql.Query(() => ConsumedComment, { nullable: true })
  async consumedComment(
    @graphql.Args() args: ConsumedCommentFindUniqueArgs
  ): Promise<ConsumedComment | null> {
    const result = await this.service.consumedComment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ConsumedComment)
  async createConsumedComment(
    @graphql.Args() args: CreateConsumedCommentArgs
  ): Promise<ConsumedComment> {
    return await this.service.createConsumedComment({
      ...args,
      data: {
        ...args.data,

        consumedPost: args.data.consumedPost
          ? {
              connect: args.data.consumedPost,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ConsumedComment)
  async updateConsumedComment(
    @graphql.Args() args: UpdateConsumedCommentArgs
  ): Promise<ConsumedComment | null> {
    try {
      return await this.service.updateConsumedComment({
        ...args,
        data: {
          ...args.data,

          consumedPost: args.data.consumedPost
            ? {
                connect: args.data.consumedPost,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConsumedComment)
  async deleteConsumedComment(
    @graphql.Args() args: DeleteConsumedCommentArgs
  ): Promise<ConsumedComment | null> {
    try {
      return await this.service.deleteConsumedComment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ConsumedPost, {
    nullable: true,
    name: "consumedPost",
  })
  async getConsumedPost(
    @graphql.Parent() parent: ConsumedComment
  ): Promise<ConsumedPost | null> {
    const result = await this.service.getConsumedPost(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

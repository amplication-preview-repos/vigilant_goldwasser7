/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsumedCommentService } from "../consumedComment.service";
import { ConsumedCommentCreateInput } from "./ConsumedCommentCreateInput";
import { ConsumedComment } from "./ConsumedComment";
import { ConsumedCommentFindManyArgs } from "./ConsumedCommentFindManyArgs";
import { ConsumedCommentWhereUniqueInput } from "./ConsumedCommentWhereUniqueInput";
import { ConsumedCommentUpdateInput } from "./ConsumedCommentUpdateInput";

export class ConsumedCommentControllerBase {
  constructor(protected readonly service: ConsumedCommentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConsumedComment })
  async createConsumedComment(
    @common.Body() data: ConsumedCommentCreateInput
  ): Promise<ConsumedComment> {
    return await this.service.createConsumedComment({
      data: {
        ...data,

        consumedPost: data.consumedPost
          ? {
              connect: data.consumedPost,
            }
          : undefined,
      },
      select: {
        consumedPost: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConsumedComment] })
  @ApiNestedQuery(ConsumedCommentFindManyArgs)
  async consumedComments(
    @common.Req() request: Request
  ): Promise<ConsumedComment[]> {
    const args = plainToClass(ConsumedCommentFindManyArgs, request.query);
    return this.service.consumedComments({
      ...args,
      select: {
        consumedPost: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConsumedComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consumedComment(
    @common.Param() params: ConsumedCommentWhereUniqueInput
  ): Promise<ConsumedComment | null> {
    const result = await this.service.consumedComment({
      where: params,
      select: {
        consumedPost: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConsumedComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsumedComment(
    @common.Param() params: ConsumedCommentWhereUniqueInput,
    @common.Body() data: ConsumedCommentUpdateInput
  ): Promise<ConsumedComment | null> {
    try {
      return await this.service.updateConsumedComment({
        where: params,
        data: {
          ...data,

          consumedPost: data.consumedPost
            ? {
                connect: data.consumedPost,
              }
            : undefined,
        },
        select: {
          consumedPost: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConsumedComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsumedComment(
    @common.Param() params: ConsumedCommentWhereUniqueInput
  ): Promise<ConsumedComment | null> {
    try {
      return await this.service.deleteConsumedComment({
        where: params,
        select: {
          consumedPost: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConsumedPost as PrismaConsumedPost,
  ConsumedComment as PrismaConsumedComment,
} from "@prisma/client";

export class ConsumedPostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConsumedPostCountArgs, "select">
  ): Promise<number> {
    return this.prisma.consumedPost.count(args);
  }

  async consumedPosts(
    args: Prisma.ConsumedPostFindManyArgs
  ): Promise<PrismaConsumedPost[]> {
    return this.prisma.consumedPost.findMany(args);
  }
  async consumedPost(
    args: Prisma.ConsumedPostFindUniqueArgs
  ): Promise<PrismaConsumedPost | null> {
    return this.prisma.consumedPost.findUnique(args);
  }
  async createConsumedPost(
    args: Prisma.ConsumedPostCreateArgs
  ): Promise<PrismaConsumedPost> {
    return this.prisma.consumedPost.create(args);
  }
  async updateConsumedPost(
    args: Prisma.ConsumedPostUpdateArgs
  ): Promise<PrismaConsumedPost> {
    return this.prisma.consumedPost.update(args);
  }
  async deleteConsumedPost(
    args: Prisma.ConsumedPostDeleteArgs
  ): Promise<PrismaConsumedPost> {
    return this.prisma.consumedPost.delete(args);
  }

  async findConsumedComments(
    parentId: string,
    args: Prisma.ConsumedCommentFindManyArgs
  ): Promise<PrismaConsumedComment[]> {
    return this.prisma.consumedPost
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .consumedComments(args);
  }
}

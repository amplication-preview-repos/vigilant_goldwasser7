/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ConsumedPost } from "./ConsumedPost";
import { ConsumedPostCountArgs } from "./ConsumedPostCountArgs";
import { ConsumedPostFindManyArgs } from "./ConsumedPostFindManyArgs";
import { ConsumedPostFindUniqueArgs } from "./ConsumedPostFindUniqueArgs";
import { CreateConsumedPostArgs } from "./CreateConsumedPostArgs";
import { UpdateConsumedPostArgs } from "./UpdateConsumedPostArgs";
import { DeleteConsumedPostArgs } from "./DeleteConsumedPostArgs";
import { ConsumedCommentFindManyArgs } from "../../consumedComment/base/ConsumedCommentFindManyArgs";
import { ConsumedComment } from "../../consumedComment/base/ConsumedComment";
import { ConsumedPostService } from "../consumedPost.service";
@graphql.Resolver(() => ConsumedPost)
export class ConsumedPostResolverBase {
  constructor(protected readonly service: ConsumedPostService) {}

  async _consumedPostsMeta(
    @graphql.Args() args: ConsumedPostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ConsumedPost])
  async consumedPosts(
    @graphql.Args() args: ConsumedPostFindManyArgs
  ): Promise<ConsumedPost[]> {
    return this.service.consumedPosts(args);
  }

  @graphql.Query(() => ConsumedPost, { nullable: true })
  async consumedPost(
    @graphql.Args() args: ConsumedPostFindUniqueArgs
  ): Promise<ConsumedPost | null> {
    const result = await this.service.consumedPost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ConsumedPost)
  async createConsumedPost(
    @graphql.Args() args: CreateConsumedPostArgs
  ): Promise<ConsumedPost> {
    return await this.service.createConsumedPost({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ConsumedPost)
  async updateConsumedPost(
    @graphql.Args() args: UpdateConsumedPostArgs
  ): Promise<ConsumedPost | null> {
    try {
      return await this.service.updateConsumedPost({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConsumedPost)
  async deleteConsumedPost(
    @graphql.Args() args: DeleteConsumedPostArgs
  ): Promise<ConsumedPost | null> {
    try {
      return await this.service.deleteConsumedPost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ConsumedComment], { name: "consumedComments" })
  async findConsumedComments(
    @graphql.Parent() parent: ConsumedPost,
    @graphql.Args() args: ConsumedCommentFindManyArgs
  ): Promise<ConsumedComment[]> {
    const results = await this.service.findConsumedComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

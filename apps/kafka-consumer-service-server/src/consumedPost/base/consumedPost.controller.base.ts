/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsumedPostService } from "../consumedPost.service";
import { ConsumedPostCreateInput } from "./ConsumedPostCreateInput";
import { ConsumedPost } from "./ConsumedPost";
import { ConsumedPostFindManyArgs } from "./ConsumedPostFindManyArgs";
import { ConsumedPostWhereUniqueInput } from "./ConsumedPostWhereUniqueInput";
import { ConsumedPostUpdateInput } from "./ConsumedPostUpdateInput";
import { ConsumedCommentFindManyArgs } from "../../consumedComment/base/ConsumedCommentFindManyArgs";
import { ConsumedComment } from "../../consumedComment/base/ConsumedComment";
import { ConsumedCommentWhereUniqueInput } from "../../consumedComment/base/ConsumedCommentWhereUniqueInput";

export class ConsumedPostControllerBase {
  constructor(protected readonly service: ConsumedPostService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConsumedPost })
  async createConsumedPost(
    @common.Body() data: ConsumedPostCreateInput
  ): Promise<ConsumedPost> {
    return await this.service.createConsumedPost({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConsumedPost] })
  @ApiNestedQuery(ConsumedPostFindManyArgs)
  async consumedPosts(@common.Req() request: Request): Promise<ConsumedPost[]> {
    const args = plainToClass(ConsumedPostFindManyArgs, request.query);
    return this.service.consumedPosts({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConsumedPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consumedPost(
    @common.Param() params: ConsumedPostWhereUniqueInput
  ): Promise<ConsumedPost | null> {
    const result = await this.service.consumedPost({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConsumedPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsumedPost(
    @common.Param() params: ConsumedPostWhereUniqueInput,
    @common.Body() data: ConsumedPostUpdateInput
  ): Promise<ConsumedPost | null> {
    try {
      return await this.service.updateConsumedPost({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          publishedDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConsumedPost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsumedPost(
    @common.Param() params: ConsumedPostWhereUniqueInput
  ): Promise<ConsumedPost | null> {
    try {
      return await this.service.deleteConsumedPost({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          publishedDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/consumedComments")
  @ApiNestedQuery(ConsumedCommentFindManyArgs)
  async findConsumedComments(
    @common.Req() request: Request,
    @common.Param() params: ConsumedPostWhereUniqueInput
  ): Promise<ConsumedComment[]> {
    const query = plainToClass(ConsumedCommentFindManyArgs, request.query);
    const results = await this.service.findConsumedComments(params.id, {
      ...query,
      select: {
        consumedPost: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/consumedComments")
  async connectConsumedComments(
    @common.Param() params: ConsumedPostWhereUniqueInput,
    @common.Body() body: ConsumedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consumedComments: {
        connect: body,
      },
    };
    await this.service.updateConsumedPost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/consumedComments")
  async updateConsumedComments(
    @common.Param() params: ConsumedPostWhereUniqueInput,
    @common.Body() body: ConsumedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consumedComments: {
        set: body,
      },
    };
    await this.service.updateConsumedPost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/consumedComments")
  async disconnectConsumedComments(
    @common.Param() params: ConsumedPostWhereUniqueInput,
    @common.Body() body: ConsumedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      consumedComments: {
        disconnect: body,
      },
    };
    await this.service.updateConsumedPost({
      where: params,
      data,
      select: { id: true },
    });
  }
}
